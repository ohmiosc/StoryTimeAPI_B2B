def getWorkspace() {
    pwd().replace("%2F", "_")
}

environment {
    AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    AWS_DEFAULT_REGION = credentials('AWS_DEFAULT_REGION')
}

try {
  node('linux') {
    wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm', 'defaultFg': 1, 'defaultBg': 2]) {
      ws(getWorkspace()) {
        workspace = pwd()

        deleteDir()

        checkout([
          $class: 'GitSCM',
          branches: scm.branches,
          extensions: scm.extensions + [[$class: 'CheckoutOption', timeout: 60], [$class: 'CloneOption', reference: '', timeout: 60]],
          userRemoteConfigs: scm.userRemoteConfigs
        ])

        stash name: 'dynamo', includes: "src/dynamo-db/**/*"
      }
    }
  }

  stage('Terraform') {
    node('docker') {
      wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm', 'defaultFg': 1, 'defaultBg': 2]) {
        deleteDir()

        unstash 'dynamo'

        docker
          .image('hashicorp/terraform')
          .withRun() {c->
            sh 'ls src'
            sh 'cd ./src/dynamo-db/deployment && sudo chmod u+x deploy.sh && ./deploy.sh'
          }
      }
    }
  }

  slackSend channel: 'kantoo-ci', message: "*Build success* ${env.JOB_NAME} #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>) ðŸš€", color: "good"
} catch (e) {
  slackSend channel: 'kantoo-ci', message: "*Build failed* ${env.JOB_NAME} #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)", color: "danger"
  throw e
}
